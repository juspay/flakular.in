"use strict";(self.webpackChunkflakular=self.webpackChunkflakular||[]).push([[3537],{1743:(e,l,s)=>{s.r(l),s.d(l,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>i});var n=s(5893),t=s(1151);const a={slug:"/haskell-flake/modules"},o="Project modules",r={id:"modules/haskell-flake/guide/modules",title:"Project modules",description:"haskell-flake's per-project configuration can be modularized and shared among multiple repos. This is done using the flake.haskellFlakeProjectModules flake output.",source:"@site/docs/modules/haskell-flake/guide/modules.md",sourceDirName:"modules/haskell-flake/guide",slug:"/haskell-flake/modules",permalink:"/haskell-flake/modules",draft:!1,unlisted:!1,editUrl:"https://github.com/srid/haskell-flake/blob/master/doc/guide/modules.md",tags:[],version:"current",frontMatter:{slug:"/haskell-flake/modules"},sidebar:"tutorialSidebar",previous:{title:"DevShell",permalink:"/haskell-flake/devshell"},next:{title:"Creating package sets",permalink:"/haskell-flake/package-set"}},d={},i=[{value:"Module arguments",id:"module-arguments",level:2},{value:"Default modules",id:"default-modules",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const l={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(l.h1,{id:"project-modules",children:"Project modules"}),"\n",(0,n.jsxs)(l.p,{children:["haskell-flake's per-project configuration can be modularized and shared among multiple repos. This is done using the ",(0,n.jsx)(l.code,{children:"flake.haskellFlakeProjectModules"})," flake output."]}),"\n",(0,n.jsxs)(l.p,{children:["Let's say you have two repositories -- ",(0,n.jsx)(l.code,{children:"common"})," and ",(0,n.jsx)(l.code,{children:"myapp"}),". The ",(0,n.jsx)(l.code,{children:"common"})," repository may expose some shared haskell-flake settings as follows:"]}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-nix",children:"{\n  # Inside flake-parts' `mkFlake`:\n  flake.haskellFlakeProjectModules.default = { pkgs, ... }: {\n    devShell.tools = hp: {\n      inherit (hp) \n        hlint\n        cabal-fmt\n        ormolu;\n    };\n    packages = {\n      mylib.source = inputs.mylib;\n    };\n  };\n}\n"})}),"\n",(0,n.jsxs)(l.p,{children:["This module can then be imported in multiple projects, such as the ",(0,n.jsx)(l.code,{children:"myapp"})," project:"]}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-nix",children:"{\n  # Inside flake-parts' `perSystem`:\n  haskellProjects.default = {\n    imports = [\n      inputs.common.haskellFlakeProjectModules.default\n    ];\n    packages = {\n      myapp.root = ./.;\n    };\n  };\n}\n"})}),"\n",(0,n.jsxs)(l.p,{children:["This way your ",(0,n.jsx)(l.code,{children:"app"}),' project knows how to find "mylib" library as well as includes the default tools you want to use in the dev shell.']}),"\n",(0,n.jsx)(l.h2,{id:"module-arguments",children:"Module arguments"}),"\n",(0,n.jsx)(l.p,{children:"A haskell-flake project module takes the following arguments:"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{children:"Argument"}),(0,n.jsx)(l.th,{children:"Description"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{children:(0,n.jsx)(l.code,{children:"pkgs"})}),(0,n.jsxs)(l.td,{children:["The perSystem's ",(0,n.jsx)(l.code,{children:"pkgs"})," argument"]})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{children:(0,n.jsx)(l.code,{children:"self"})}),(0,n.jsxs)(l.td,{children:["The flake's ",(0,n.jsx)(l.code,{children:"self"})]})]})]})]}),"\n",(0,n.jsx)(l.h2,{id:"default-modules",children:"Default modules"}),"\n",(0,n.jsxs)(l.p,{children:['By default, haskell-flake will generate the following modules for the "default" ',(0,n.jsx)(l.code,{children:"haskellProject"}),":"]}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{children:"Module"}),(0,n.jsx)(l.th,{children:"Contents"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{children:(0,n.jsx)(l.code,{children:"haskellFlakeProjectModules.output"})}),(0,n.jsx)(l.td,{children:"Local packages & dependency overrides"})]})})]}),"\n",(0,n.jsxs)(l.p,{children:['The idea here being that you can "connect" two Haskell projects such that they depend on one another while reusing the overrides (',(0,n.jsx)(l.code,{children:"packages"})," and ",(0,n.jsx)(l.code,{children:"settings"}),') from one place. For example, if you have a project "foo" that depends on "bar" and if "foo"\'s flake.nix has "bar" as its input, then in "foo"\'s ',(0,n.jsx)(l.code,{children:"haskellProject.default"}),' entry you can import "bar" as follows:']}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-nix",children:"# foo's flake.nix's perSystem\n{ \n  haskellProjects.default = {\n    imports = [\n      inputs.bar.haskellFlakeProjectModules.output\n    ];\n    packages = {\n      foo.root = ./.;\n    };\n  };\n}\n"})}),"\n",(0,n.jsxs)(l.p,{children:['By importing "bar"\'s ',(0,n.jsx)(l.code,{children:"output"}),' project module, you automatically get the overrides from "bar" as well as the local packages. This way you don\'t have to duplicate the ',(0,n.jsx)(l.code,{children:"settings"})," and manually specify the ",(0,n.jsx)(l.code,{children:"packages.<name>.source"}),' in "foo"\'s flake.nix.']}),"\n",(0,n.jsx)(l.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsxs)(l.li,{children:[(0,n.jsx)(l.a,{href:"https://github.com/nammayatri/nammayatri",children:"https://github.com/nammayatri/nammayatri"})," (imports ",(0,n.jsx)(l.code,{children:"shared-kernel"})," which in turn imports ",(0,n.jsx)(l.code,{children:"euler-hs"}),")"]}),"\n"]})]})}function h(e={}){const{wrapper:l}={...(0,t.a)(),...e.components};return l?(0,n.jsx)(l,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,l,s)=>{s.d(l,{Z:()=>r,a:()=>o});var n=s(7294);const t={},a=n.createContext(t);function o(e){const l=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function r(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(a.Provider,{value:l},e.children)}}}]);