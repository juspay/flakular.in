"use strict";(self.webpackChunkzero_to_flakes=self.webpackChunkzero_to_flakes||[]).push([[602],{3905:(e,t,r)=>{r.d(t,{Zo:()=>f,kt:()=>c});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),s=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},f=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),m=s(r),d=n,c=m["".concat(u,".").concat(d)]||m[d]||p[d]||o;return r?a.createElement(c,l(l({ref:t},f),{},{components:r})):a.createElement(c,l({ref:t},f))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[m]="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2234:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const o={slug:"/treefmt-nix"},l="Auto formatting (treefmt-nix)",i={unversionedId:"modules/treefmt",id:"modules/treefmt",title:"Auto formatting (treefmt-nix)",description:"treefmt provides an interface to run multiple code formatters at once, so you don't have to run them manually for each file type.",source:"@site/docs/modules/treefmt.md",sourceDirName:"modules",slug:"/treefmt-nix",permalink:"/treefmt-nix",draft:!1,editUrl:"https://github.com/juspay/zero-to-flakes/tree/main/docs/modules/treefmt.md",tags:[],version:"current",frontMatter:{slug:"/treefmt-nix"},sidebar:"tutorialSidebar",previous:{title:"services-flake",permalink:"/services-flake"},next:{title:"Best Practices",permalink:"/practices"}},u={},s=[{value:"Writing the Nix to configure treefmt in your project",id:"writing-the-nix-to-configure-treefmt-in-your-project",level:2},{value:"Add treefmt and flake-root to your inputs",id:"add-treefmt-and-flake-root-to-your-inputs",level:3},{value:"Import <code>flakeModule</code> output of treefmt and flake-root",id:"import-flakemodule-output-of-treefmt-and-flake-root",level:3},{value:"Configure your formatter",id:"configure-your-formatter",level:3},{value:"Add treefmt to your devShell",id:"add-treefmt-to-your-devshell",level:3},{value:"Flake check",id:"flake-check",level:3},{value:"Tips",id:"tips",level:2},{value:"Exclude folders",id:"exclude-folders",level:3},{value:"Use a different package for formatter",id:"use-a-different-package-for-formatter",level:3},{value:"Pass additional parameters to your formatter",id:"pass-additional-parameters-to-your-formatter",level:3},{value:"Example",id:"example",level:2},{value:"Upcoming",id:"upcoming",level:2}],f={toc:s},m="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,a.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"auto-formatting-treefmt-nix"},"Auto formatting (",(0,n.kt)("inlineCode",{parentName:"h1"},"treefmt-nix"),")"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/numtide/treefmt"},"treefmt")," provides an interface to run multiple ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Prettyprint"},"code formatters")," at once, so you don't have to run them manually for each file type."),(0,n.kt)("h2",{id:"writing-the-nix-to-configure-treefmt-in-your-project"},"Writing the Nix to configure treefmt in your project"),(0,n.kt)("h3",{id:"add-treefmt-and-flake-root-to-your-inputs"},"Add treefmt and flake-root to your inputs"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/srid/flake-root"},(0,n.kt)("inlineCode",{parentName:"a"},"flake-root"))," module is needed to find the root of your project based on the presence of a file, by default it is ",(0,n.kt)("inlineCode",{parentName:"p"},"flake.nix"),". "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-nix"},'{\n  # Inside `inputs`\n  treefmt-nix.url = "github:numtide/treefmt-nix";\n  flake-root.url = "github:srid/flake-root";\n}\n')),(0,n.kt)("h3",{id:"import-flakemodule-output-of-treefmt-and-flake-root"},"Import ",(0,n.kt)("inlineCode",{parentName:"h3"},"flakeModule")," output of treefmt and flake-root"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-nix"},"{\n  # Inside outputs' `flake-parts.lib.mkFlake` \n  imports = [\n    inputs.treefmt-nix.flakeModule\n    inputs.flake-root.flakeModule\n  ];\n}\n")),(0,n.kt)("h3",{id:"configure-your-formatter"},"Configure your formatter"),(0,n.kt)("p",null,"To actually enable the individual formatters you want to configure treefmt. The example configuration below only consists of formatters required by a haskell project using nix. Refer to ",(0,n.kt)("a",{parentName:"p",href:"https://numtide.github.io/treefmt/formatters/"},"treefmt-doc")," for more formatters."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-nix"},"{\n  # Inside mkFlake's `perSystem`\n  treefmt.config = {\n    inherit (config.flake-root) projectRootFile;\n    # This is the default, and can be overriden.\n    package = pkgs.treefmt;\n    # formats .hs files (fourmolu is also available)\n    programs.ormolu.enable = true;\n    # formats .nix files\n    programs.nixpkgs-fmt.enable = true;\n    # formats .cabal files\n    programs.cabal-fmt.enable = false;\n    # Suggests improvements for your code in .hs files\n    programs.hlint.enable = false;\n  };\n}\n")),(0,n.kt)("h3",{id:"add-treefmt-to-your-devshell"},"Add treefmt to your devShell"),(0,n.kt)("p",null,"Finally, add the resulting treefmt wrapper (",(0,n.kt)("inlineCode",{parentName:"p"},"build.wrapper"),") to your devShell. We also add the individual formatters (",(0,n.kt)("inlineCode",{parentName:"p"},"build.programs"),") to the devShell, so that they can be used directly in text editors and IDEs."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-nix"},"{\n  # Inside mkFlake's `perSystem`\n  haskellProjects.default = {\n    devShell.tools = _: {\n      treefmt = config.treefmt.build.wrapper;\n    } // config.treefmt.build.programs;\n  };\n}\n")),(0,n.kt)("h3",{id:"flake-check"},"Flake check"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"treefmt-nix")," flake module automatically adds a flake check that can be evaluated to make sure that the project is already autoformatted."),(0,n.kt)("h2",{id:"tips"},"Tips"),(0,n.kt)("h3",{id:"exclude-folders"},"Exclude folders"),(0,n.kt)("p",null,"If there are folders where you wouldn't want to run the formatter on, use the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-nix"},'  # Inside mkFlake\'s `perSystem.treefmt.config`\n  settings.formatter.<formatter-name>.excludes = [ "./foo/*" ];\n')),(0,n.kt)("h3",{id:"use-a-different-package-for-formatter"},"Use a different package for formatter"),(0,n.kt)("p",null,"The package shipped with the current nixpkgs might not be the desired one, follow the snippet below to override the package (assuming ",(0,n.kt)("inlineCode",{parentName:"p"},"nixpkgs-21_11")," is present in your flake's inputs)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-nix"},"  # Inside mkFlake's `perSystem.treefmt.config`\n  programs.ormolu.package = nixpkgs-21_11.haskellPackages.ormolu;\n")),(0,n.kt)("p",null,"The same can be applied to other formatters."),(0,n.kt)("h3",{id:"pass-additional-parameters-to-your-formatter"},"Pass additional parameters to your formatter"),(0,n.kt)("p",null,"You might want to change a certain behaviour of your formatter by overriding by passing the input to the executable. The following example shows how to pass ",(0,n.kt)("inlineCode",{parentName:"p"},"ghc-opt")," to ormolu:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-nix"},'  # Inside mkFlake\'s `perSystem.treefmt.config`\n  settings.formatter.ormolu = {\n    options = [\n      "--ghc-opt"\n      "-XTypeApplications"\n    ];\n  };\n')),(0,n.kt)("p",null,"Ormolu requires this ",(0,n.kt)("inlineCode",{parentName:"p"},"ghc-opt")," because unlike a lot of language extensions which are enabled by default, there are some which aren't. These can be found using ",(0,n.kt)("inlineCode",{parentName:"p"},"ormolu --manual-exts"),"."),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/srid/haskell-template/blob/a8b6d1f547d761ba392a31e644494d0eeee49c2a/flake.nix#L38-L55"},"Sample treefmt config for your haskell project"))),(0,n.kt)("h2",{id:"upcoming"},"Upcoming"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"treefmt")," will provide a pre-commit mode to disable commit if formatting checks fail. This is tracked here: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/numtide/treefmt/issues/78"},"https://github.com/numtide/treefmt/issues/78"))))}p.isMDXComponent=!0}}]);