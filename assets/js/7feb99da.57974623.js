"use strict";(self.webpackChunkzero_to_flakes=self.webpackChunkzero_to_flakes||[]).push([[241],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?o.createElement(f,l(l({ref:t},c),{},{components:n})):o.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8205:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={slug:"/mission-control",sidebar_label:"Scripts (mission-control)",sidebar_position:2},l="mission-control",i={unversionedId:"modules/mission-control",id:"modules/mission-control",title:"mission-control",description:"The mission-control flake-parts module enables creating a set of scripts or commands to run in the Nix dev shell. This makes it possible for the project's user to locate all of the commands\xa0they need (to get started) in one place, often replacing the likes of Makefile or bin/ scripts.",source:"@site/docs/modules/mission-control.md",sourceDirName:"modules",slug:"/mission-control",permalink:"/mission-control",draft:!1,editUrl:"https://github.com/juspay/zero-to-flakes/tree/main/docs/modules/mission-control.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/mission-control",sidebar_label:"Scripts (mission-control)",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Reference",permalink:"/haskell-flake/ref"},next:{title:"process-compose-flake",permalink:"/process-compose-flake"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Add a script (Haskell)",id:"add-a-script-haskell",level:2},{value:"Docs (Hoogle)",id:"docs-hoogle",level:3},{value:"Cabal repl",id:"cabal-repl",level:3},{value:"treefmt",id:"treefmt",level:3},{value:"Tips",id:"tips",level:2},{value:"wrapperName",id:"wrappername",level:3},{value:"Upcoming",id:"upcoming",level:2},{value:"Example",id:"example",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mission-control"},"mission-control"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Platonic-Systems/mission-control"},"mission-control")," flake-parts module enables creating a set of scripts or commands to run in the Nix dev shell. This makes it possible for the project's user to locate all of the commands\xa0they need (to get started) in one place, often replacing the likes of ",(0,r.kt)("inlineCode",{parentName:"p"},"Makefile")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"bin/")," scripts."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To use this module, add ",(0,r.kt)("inlineCode",{parentName:"p"},"mission-control")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"inputs"),","),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nix"},'{\n  # Inside inputs\n  mission-control.url = "github:Platonic-Systems/mission-control";\n}\n')),(0,r.kt)("p",null,"and import its flakeModule:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nix"},"{\n  # Inside mkFlake\n  imports = [\n    inputs.mission-control.flakeModule\n  ];\n}\n")),(0,r.kt)("h2",{id:"add-a-script-haskell"},"Add a script (Haskell)"),(0,r.kt)("p",null,"Here we'll show a sample of scripts that are particular useful when developing ",(0,r.kt)("inlineCode",{parentName:"p"},"[Haskell](/haskell-flake)")," projects."),(0,r.kt)("h3",{id:"docs-hoogle"},"Docs (Hoogle)"),(0,r.kt)("p",null,"We can add a convenient script to start Hoogle on project dependencies as follows. As a result, typing ",(0,r.kt)("inlineCode",{parentName:"p"},", docs")," in the dev shell will start Hoogle."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nix"},"{\n  # Inside perSystem\n  mission-control.scripts = {\n    docs = {\n      description = \"Start Hoogle server for project dependencies\";\n      exec = ''\n        echo http://127.0.0.1:8888\n        hoogle serve -p 8888 --local\n      '';\n      category = \"Dev Tools\";\n    };\n  };\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"exec")," option can be either a shell script (string) or a Nix package. The ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," option defines the group that this script belongs to, when displayed in the menu."),(0,r.kt)("h3",{id:"cabal-repl"},"Cabal repl"),(0,r.kt)("p",null,"To start a cabal repl from your devShell on running  ",(0,r.kt)("inlineCode",{parentName:"p"},", repl"),", use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nix"},'{\n  # Inside perSystem\n  mission-control.scripts = {\n    repl = {\n      description = "Start the cabal repl";\n      exec = \'\'\n        cabal repl "$@"\n      \'\';\n      category = "Dev Tools";\n    };\n  };\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html"},(0,r.kt)("inlineCode",{parentName:"a"},'"$@"'))," represents the command-line arguments passed to ",(0,r.kt)("inlineCode",{parentName:"p"},", repl"),". This allows us to pass custom arguments to ",(0,r.kt)("inlineCode",{parentName:"p"},"cabal repl"),". For example, if you wish to run an executable ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," from your project in cabal repl, you'd run ",(0,r.kt)("inlineCode",{parentName:"p"},", repl exe:foo"),". Similarly, to get into the repl for a library ",(0,r.kt)("inlineCode",{parentName:"p"},"bar")," you'd run ",(0,r.kt)("inlineCode",{parentName:"p"},", run lib:bar"),"."),(0,r.kt)("h3",{id:"treefmt"},"treefmt"),(0,r.kt)("p",null,"If you use the ",(0,r.kt)("a",{parentName:"p",href:"/treefmt-nix"},"treefmt")," module for autoformatting the source tree, you can alias it as ",(0,r.kt)("inlineCode",{parentName:"p"},", fmt"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nix"},'{ \n  # Inside perSystem\n  mission-control.scripts = {\n    fmt = {\n      description = "Format the source tree";\n      exec = config.treefmt.build.wrapper;\n      category = "Dev Tools";\n    };\n  };\n}\n')),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"exec")," in this example is a Nix package."),(0,r.kt)("h2",{id:"tips"},"Tips"),(0,r.kt)("h3",{id:"wrappername"},"wrapperName"),(0,r.kt)("p",null,"If you don't wish to run your command using ",(0,r.kt)("inlineCode",{parentName:"p"},", <command>")," you can change the ",(0,r.kt)("inlineCode",{parentName:"p"},",")," to be any string of your choice by setting the option ",(0,r.kt)("inlineCode",{parentName:"p"},"wrapperName"),", as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nix"},'{\n  # Inside perSystem\n  mission-control = {\n    wrapperName = "s";\n  };\n}\n')),(0,r.kt)("h2",{id:"upcoming"},"Upcoming"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Platonic-Systems/mission-control/issues/4"},"Zsh and bash shell completion"))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/srid/haskell-template/blob/master/flake.nix"},"https://github.com/srid/haskell-template/blob/master/flake.nix"))))}u.isMDXComponent=!0}}]);