"use strict";(self.webpackChunkflakular=self.webpackChunkflakular||[]).push([[6066],{8029:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=n(5893),r=n(1151);const o={sidebar_position:1,slug:"/store"},s="The Nix Store",a={id:"foundations/nix-store",title:"The Nix Store",description:"Write this to completion.",source:"@site/docs/foundations/nix-store.md",sourceDirName:"foundations",slug:"/store",permalink:"/store",draft:!1,unlisted:!1,editUrl:"https://github.com/juspay/flakular.in/edit/main/docs/foundations/nix-store.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/store"},sidebar:"tutorialSidebar",previous:{title:"Foundations",permalink:"/foundations"},next:{title:"The Nix Language",permalink:"/lang"}},l={},c=[{value:"Kitchen analogy",id:"kitchen-analogy",level:2},{value:"Interactive exploration",id:"interactive-exploration",level:2},{value:"Exercises",id:"exercises",level:2}];function d(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"the-nix-store",children:"The Nix Store"}),"\n",(0,t.jsx)(i.admonition,{title:"TODO",type:"warning",children:(0,t.jsx)(i.p,{children:"Write this to completion."})}),"\n",(0,t.jsxs)(i.p,{children:["Nix is purely functional but in ",(0,t.jsx)(i.a,{href:"https://www.tweag.io/blog/2022-07-14-taming-unix-with-nix/",children:"the context of file system"})," (as opposed to values stored in memory). As such, how this file system is structured (called the ",(0,t.jsx)(i.em,{children:"Nix Store"}),") is the first foundational concept to understand."]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.strong,{children:"Nix store"})," is located in the ",(0,t.jsx)(i.code,{children:"/nix/store"})," directory by default. The contents of this directory are called ",(0,t.jsx)(i.strong,{children:"store paths"}),". For eg., ",(0,t.jsx)(i.code,{children:"/nix/store/05p0my9hlc33iamk3rzg61rgg1fhrf7w-haskell-template-0.1.0.0"})," is a store path. Thus a Nix store is simply a collection of store paths. The nix build process largely involves transformation of these store paths to produce further new store paths."]}),"\n",(0,t.jsx)(i.admonition,{title:"TODO: Diagram",type:"caution",children:(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"File system diagram of Nix store"}),"\n",(0,t.jsx)(i.li,{children:"Entities connected to one another."}),"\n"]})}),"\n",(0,t.jsx)(i.h2,{id:"kitchen-analogy",children:"Kitchen analogy"}),"\n",(0,t.jsx)(i.p,{children:"Let's try a real-world analogy to understand the Nix store."}),"\n",(0,t.jsxs)(i.p,{children:["If the ",(0,t.jsx)(i.em,{children:"Nix store"})," is the kitchen, then the ",(0,t.jsx)(i.em,{children:"store paths"})," are the various objects in it -- foodstuff, ingredients, recipe booklets, cooked food, dinner servings, etc."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Burger_King_Quad_Stacker_cheeseburger.jpg/2560px-Burger_King_Quad_Stacker_cheeseburger.jpg",alt:"Cheeseburger"})}),"\n",(0,t.jsxs)(i.p,{children:["Let's say you want to cook a ",(0,t.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Cheeseburger",children:"cheeseburger"}),". In Nix-speak, we say that we want to ",(0,t.jsx)(i.em,{children:"build"})," the cheeseburger ",(0,t.jsx)(i.em,{children:"package"}),". To cook (build) the cheeseburger, however, we need a receipe first. In Nix-speak, we call this recipe a ",(0,t.jsx)(i.em,{children:"derivation"}),". Both packages and derivations are ",(0,t.jsx)(i.em,{children:"store paths"})," that exist in the Nix store; the Nix store uniformly treats them as store paths, with no special treatment. Likewise, both the cheeseburger recipe (as a paper document) and the cheeseburger itself (as a cooked food) exist in your kitchen as physical objects."]}),"\n",(0,t.jsx)(i.admonition,{title:"TODO: Analogy table",type:"caution",children:(0,t.jsx)(i.p,{children:"A tabular comparison of the terms, establishing nomenclature for rest of article."})}),"\n",(0,t.jsx)(i.p,{children:"..."}),"\n",(0,t.jsx)(i.admonition,{title:"TODO: Diagram",type:"caution",children:(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Kitchen recipes"}),"\n",(0,t.jsx)(i.li,{children:"Sharing recipes with neighbours"}),"\n"]})}),"\n",(0,t.jsx)(i.h2,{id:"interactive-exploration",children:"Interactive exploration"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"TODO: nix commands to explore/manipulate the store directly\n\nnix store add-file\nnix store add-path\nnix store delete\nnix store prefetch-file\n"})}),"\n",(0,t.jsx)(i.p,{children:"Creating a recipe (derivation)"}),"\n",(0,t.jsxs)(i.p,{children:["There is a ",(0,t.jsx)(i.code,{children:"nix derivation add"})," command to create a derivation via JSON, but let's use the ",(0,t.jsx)(i.a,{href:"/lang",children:"Nix language"})," to do this, in the REPL (using the bulitin function ",(0,t.jsx)(i.code,{children:"derivation"}),"), as it is more convenient."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-nix",children:'$ nix repl\n\nnix-repl> drv = derivation { \n        name = "hello"; \n        builder = "/bin/bash"; \n        system = "aarch64-darwin"; \n        args = [ "-c" "echo Hello > $out"]; \n    }\n\nnix-repl> drv\n\xabderivation /nix/store/2dc96vagivg3h45sbkr2jrl31xnmdj2c-hello.drv\xbb\n\nnix-repl> :b drv\nThis derivation produced the following outputs:\n  out -> /nix/store/gaarvnj99dcfx8c8wnvfsqzql2fj5d65-hello\n\n'})}),"\n",(0,t.jsxs)(i.p,{children:["Here ",(0,t.jsx)(i.code,{children:"/nix/store/2dc96vagivg3h45sbkr2jrl31xnmdj2c-hello.drv"}),' is the derivation (or "recipe"). Building (or "cooking") it gives us the package (or "cooked food") ',(0,t.jsx)(i.code,{children:"/nix/store/gaarvnj99dcfx8c8wnvfsqzql2fj5d65-hello"}),". Note that both the derivation and the package are just ",(0,t.jsx)(i.em,{children:"store paths"}),'. The recipe itself does nothing fancy, aside from creating a file with the contents "Hello" in it. In Nix of course it is possible to create derivations that build an entire Linux distribution (',(0,t.jsx)(i.a,{href:"/nixos-flake",children:"NixOS"}),'), just as one might gather up a set of recipes to cook for a big party resulting in a big feast (the final "package").']}),"\n",(0,t.jsx)(i.p,{children:"A derivation can use outputs of another derivation, just as a recipe can use the product of another recipe:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-nix",children:'# Uses the derivation defined above, by referencing `${drv}` that points to the\n# out path of that derivation\nnix-repl> :b derivation { \n        name = "hello-world"; \n        builder = "/bin/bash"; \n        system = "aarch64-darwin"; \n        args = [ "-c" "/bin/cat ${drv} > $out; echo World >> $out"]; \n    }\nThis derivation produced the following outputs:\n  out -> /nix/store/nw7fyal65xfzbhaqxjgfm9i4m4fyd92l-hello-world\n'})}),"\n",(0,t.jsx)(i.admonition,{title:"Tip",type:"info",children:(0,t.jsxs)(i.p,{children:["There are more convenient ways to write derivations, such as ",(0,t.jsx)(i.code,{children:"stdenv.mkDerivation"}),". We'll expore these in the ",(0,t.jsx)(i.a,{href:"/lang",children:"Nix language"})," section."]})}),"\n",(0,t.jsx)(i.h2,{id:"exercises",children:"Exercises"}),"\n",(0,t.jsx)(i.p,{children:"TODO"})]})}function h(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,i,n)=>{n.d(i,{Z:()=>a,a:()=>s});var t=n(7294);const r={},o=t.createContext(r);function s(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);