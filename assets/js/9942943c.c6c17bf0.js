"use strict";(self.webpackChunkflakular=self.webpackChunkflakular||[]).push([[6545],{6815:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>r});var l=s(5893),n=s(1151);const t={slug:"/haskell-flake/package-set"},c="Creating package sets",i={id:"modules/haskell-flake/guide/package-set",title:"Creating package sets",description:"While haskell-flake is generally used to develop and build individual Haskell projects, you can also use it to create a custom Haskell package set that you can use in other projects. This is useful if you want to create a common package set to be shared across multiple projects.",source:"@site/docs/modules/haskell-flake/guide/package-set.md",sourceDirName:"modules/haskell-flake/guide",slug:"/haskell-flake/package-set",permalink:"/haskell-flake/package-set",draft:!1,unlisted:!1,editUrl:"https://github.com/srid/haskell-flake/blob/master/doc/guide/package-set.md",tags:[],version:"current",frontMatter:{slug:"/haskell-flake/package-set"},sidebar:"tutorialSidebar",previous:{title:"Project modules",permalink:"/haskell-flake/modules"},next:{title:"Optimize package size",permalink:"/haskell-flake/size"}},o={},r=[{value:"Examples",id:"examples",level:2}];function h(e){const a={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.h1,{id:"creating-package-sets",children:"Creating package sets"}),"\n",(0,l.jsx)(a.p,{children:"While haskell-flake is generally used to develop and build individual Haskell projects, you can also use it to create a custom Haskell package set that you can use in other projects. This is useful if you want to create a common package set to be shared across multiple projects."}),"\n",(0,l.jsxs)(a.p,{children:['A "project" in haskell-flake primarily serves the purpose of developing Haskell projects. Additionally, a project also exposes the final ',(0,l.jsx)(a.em,{children:"package set"})," via the readonly option ",(0,l.jsx)(a.code,{children:"outputs.finalPackages"}),". This package set includes the base packages (",(0,l.jsx)(a.code,{children:"basePackages"}),"), the local packages as well as any ",(0,l.jsx)(a.a,{href:"/haskell-flake/dependency",children:"dependency overrides"})," you set. Since we are are only interested in creating a new package set, we can use empty local packages and disable the dev shell:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-nix",children:"{\n  haskellProjects.ghc810 = {\n    defaults.packages = {};  # Disable scanning for local package\n    devShell.enable = false; # Disable devShells\n    autoWire = [ ];          # Don't wire any flake outputs\n\n    # Start from nixpkgs's ghc8107 package set\n    basePackages = pkgs.haskell.packages.ghc8107;\n  };\n}\n"})}),"\n",(0,l.jsxs)(a.p,{children:["You can access this package set as ",(0,l.jsx)(a.code,{children:"config.haskellProjects.ghc810.outputs.finalPackages"}),". But this is not terribly interesting, because it is the exact same as the package set ",(0,l.jsx)(a.code,{children:"pkgs.haskell.packages.ghc8107"})," from nixpkgs. So let's add and override some packages in this set:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-nix",children:'{\n  haskellProjects.ghc810 = {\n    defaults.packages = {};  # No local packages\n    devShell.enable = false;\n\n    basePackages = pkgs.haskell.packages.ghc8107;\n\n    packages = {\n      # New packages from flake inputs\n      mylib.source = inputs.mylib;\n      # Dependencies from Hackage\n      aeson.source = "1.5.6.0";\n      dhall.source = "1.35.0";\n    };\n    settings = {\n       aeson.jailbreak = true;\n    };\n  };\n}\n'})}),"\n",(0,l.jsxs)(a.p,{children:["This will create a package set that overrides the ",(0,l.jsx)(a.code,{children:"aeson"})," and ",(0,l.jsx)(a.code,{children:"dhall"})," packages using the specified versions from Hackage, but with the ",(0,l.jsx)(a.code,{children:"aeson"})," package having the ",(0,l.jsx)(a.code,{children:"jailbreak"})," flag set (which relaxes its Cabal constraints).  It also adds the ",(0,l.jsx)(a.code,{children:"mylib"})," package which exists neither in nixpkgs nor in Hackage, but comes from somewhere arbitrary and specified as flake input."]}),"\n",(0,l.jsxs)(a.p,{children:["In your ",(0,l.jsx)(a.em,{children:"actual"})," haskell project, you can use this package set (",(0,l.jsx)(a.code,{children:"config.haskellProjects.ghc810.outputs.finalPackages"}),") as its base package set:"]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-nix",children:"{\n  haskellProjects.myproject = {\n    packages.mypackage.source = ./.;\n\n    basePackages = config.haskellProjects.ghc810.outputs.finalPackages;\n  };\n}\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Finally, you can externalize this ",(0,l.jsx)(a.code,{children:"ghc810"})," package set as either a flake-parts module or as a ",(0,l.jsx)(a.a,{href:"/haskell-flake/modules",children:"haskell-flake module"}),", and thereon import it from multiple repositories."]}),"\n",(0,l.jsx)(a.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsxs)(a.ul,{children:["\n",(0,l.jsx)(a.li,{children:(0,l.jsx)(a.a,{href:"https://github.com/nammayatri/common/pull/11/files",children:"https://github.com/nammayatri/common/pull/11/files"})}),"\n"]})]})}function d(e={}){const{wrapper:a}={...(0,n.a)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},1151:(e,a,s)=>{s.d(a,{Z:()=>i,a:()=>c});var l=s(7294);const n={},t=l.createContext(n);function c(e){const a=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),l.createElement(t.Provider,{value:a},e.children)}}}]);