"use strict";(self.webpackChunkzero_to_flakes=self.webpackChunkzero_to_flakes||[]).push([[7297],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=c(n),m=r,d=h["".concat(s,".").concat(m)]||h[m]||u[m]||i;return n?a.createElement(d,l(l({ref:t},p),{},{components:n})):a.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[h]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={slug:"/health"},l="Nix Health",o={unversionedId:"practices/nix-health",id:"practices/nix-health",title:"Nix Health",description:"nix-health is a program that checks the health of your Nix install. Furthermore, individual projects can configure their own health checks in their flake.nix. For example, the nammayatri project checks that the cachix cache is in use.",source:"@site/docs/practices/nix-health.md",sourceDirName:"practices",slug:"/health",permalink:"/health",draft:!1,editUrl:"https://github.com/juspay/nix-browser/blob/master/crates/nix_health/README.md",tags:[],version:"current",frontMatter:{slug:"/health"},sidebar:"tutorialSidebar",previous:{title:"Building a docker image",permalink:"/docker"},next:{title:"Gotchas",permalink:"/gotchas"}},s={},c=[{value:"Checks performed",id:"checks-performed",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuring in <code>flake.nix</code>",id:"conf",level:2}],p={toc:c},h="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nix-health"},"Nix Health"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/juspay/nix-browser/tree/main/crates/nix_health"},"nix-health"),(0,r.kt)("sup",{parentName:"p",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," is a program that checks the health of your Nix install. Furthermore, individual projects can configure their own health checks in their ",(0,r.kt)("inlineCode",{parentName:"p"},"flake.nix"),". For example, the nammayatri project checks that ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nammayatri/nammayatri/blob/2201f618af69dc78070fefeb4f082420b1d226cc/flake.nix#L29-L31"},"the cachix cache is in use"),"."),(0,r.kt)("h2",{id:"checks-performed"},"Checks performed"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Check"),(0,r.kt)("th",{parentName:"tr",align:null},"Configurable in ",(0,r.kt)("inlineCode",{parentName:"th"},"flake.nix"),"?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Flakes are enabled"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nix version is not too old"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nix runs natively (no rosetta)",(0,r.kt)("sup",{parentName:"td",id:"fnref-2"},(0,r.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Builds use multiple cores (",(0,r.kt)("inlineCode",{parentName:"td"},"max-jobs"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Nix Caches in use"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"$USER is in ",(0,r.kt)("inlineCode",{parentName:"td"},"trusted-users")),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Direnv: installed and activated"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Min RAM / Disk space"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Note that some checks are considered non-essential. For eg., the disk space check looks for 1TB+ disk space, but if the user is on a laptop with 256GB SSD, the check will report a warning instead of failing. This can also be configured in per-project basis from ",(0,r.kt)("inlineCode",{parentName:"p"},"flake.nix")," (see below)."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"nix-health is still in development. To run the development version,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'nix run "github:juspay/nix-browser#nix-health"\n')),(0,r.kt)("p",null,"To run nix-health along with health check configuration specified in a project flake, pass that flake as an argument. For eg., to run nix-health with additional checks from the nammayatri project, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# The argument can be any flake URL (including a local path)\nnix run "github:juspay/nix-browser#nix-health" github:nammayatri/nammayatri\n')),(0,r.kt)("h2",{id:"conf"},"Configuring in ",(0,r.kt)("inlineCode",{parentName:"h2"},"flake.nix")),(0,r.kt)("p",null,"To add project specific health checks or configure health checks, add the following flake output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nix"},'{\n  outputs = inputs: {\n    nix-health.default = {\n      # Add configuration here\n      caches.required = [ "https://ourproject.cachix.org" ];\n    };\n  };\n}\n')),(0,r.kt)("p",null,"To see all available configuration options, run ",(0,r.kt)("inlineCode",{parentName:"p"},"nix-health --dump-schema"),". This will dump the schema of the configuration in JSON format. Convert that to a Nix attrset to see what can be added under the ",(0,r.kt)("inlineCode",{parentName:"p"},"nix-health.default")," attrset of your flake."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh-session"},'$ nix-health --dump-schema > schema.json\n$ nix eval --impure --expr \'builtins.fromJSON (builtins.readFile ./schema.json)\' | nix run nixpkgs#alejandra -- --quiet\n{\n  caches = {required = ["https://cache.nixos.org/"];};\n  direnv = {\n    enable = true;\n    required = false;\n  };\n  flake-enabled = {};\n  max-jobs = {};\n  nix-version = {min-required = "2.13.0";};\n  rosetta = {\n    enable = true;\n    required = true;\n  };\n  system = {\n    enable = true;\n    min_disk_space = "1024.0 GB";\n    min_ram = null;\n    required = false;\n  };\n  trusted-users = {};\n}\n')),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},"nix-health originally began as a script ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/srid/nix-health"},"https://github.com/srid/nix-health")," which is now deprecated.",(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,r.kt)("li",{parentName:"ol",id:"fn-2"},"This check is only performed on macOS with Apple Silicon.",(0,r.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0}}]);