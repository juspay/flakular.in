"use strict";(self.webpackChunkflakular=self.webpackChunkflakular||[]).push([[272],{8575:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>t});var n=o(5893),r=o(1151);const c={slug:"/process-compose-flake",sidebar_position:3,sidebar_label:"Processes"},i="Process management using process-compose-flake",a={id:"modules/process-compose-flake/index",title:"Process management using process-compose-flake",description:"process-compose-flake is a flake-parts module for process-compose.",source:"@site/docs/modules/process-compose-flake/index.md",sourceDirName:"modules/process-compose-flake",slug:"/process-compose-flake",permalink:"/process-compose-flake",draft:!1,unlisted:!1,editUrl:"https://github.com/Platonic-Systems/process-compose-flake/blob/master/doc/index.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{slug:"/process-compose-flake",sidebar_position:3,sidebar_label:"Processes"},sidebar:"tutorialSidebar",previous:{title:"Scripts",permalink:"/mission-control"},next:{title:"Services",permalink:"/services-flake"}},l={},t=[{value:"Quick Example",id:"quick-example",level:2},{value:"Usage",id:"usage",level:2},{value:"Module API",id:"module-api",level:2},{value:"Related projects",id:"related-projects",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.h1,{id:"process-management-using-process-compose-flake",children:["Process management using ",(0,n.jsx)(s.code,{children:"process-compose-flake"})]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"https://github.com/Platonic-Systems/process-compose-flake",children:"process-compose-flake"})," is a ",(0,n.jsx)(s.a,{href:"https://flake.parts/",children:"flake-parts"})," module for ",(0,n.jsx)(s.a,{href:"https://github.com/F1bonacc1/process-compose",children:"process-compose"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["This ",(0,n.jsx)(s.code,{children:"flake-parts"})," module allows you to declare one or more ",(0,n.jsx)(s.code,{children:"process-compose"})," configurations using Nix attribute sets. It will generate corresponding ",(0,n.jsx)(s.code,{children:"packages"})," that wrap the ",(0,n.jsx)(s.code,{children:"process-compose"})," binary with the given configuration."]}),"\n",(0,n.jsxs)(s.p,{children:["This module is practical for local development e.g. if you have a lot of runtime dependencies that depend on each other. Stop executing these programs imperatively over and over again in a specific order, and stop the need to write complicated shell scripts to automate this. ",(0,n.jsx)(s.code,{children:"process-compose"})," gives you a process dashboard for monitoring, inspecting logs for each process, and much more, all of this in a TUI."]}),"\n",(0,n.jsx)(s.h2,{id:"quick-example",children:"Quick Example"}),"\n",(0,n.jsxs)(s.p,{children:["See ",(0,n.jsx)(s.a,{href:"https://github.com/Platonic-Systems/process-compose-flake/blob/main/example/flake.nix",children:(0,n.jsx)(s.code,{children:"example/flake.nix"})})," for an example flake. This example shows a demo of ",(0,n.jsx)(s.a,{href:"https://github.com/coleifer/sqlite-web",children:"sqlite-web"})," using the sample ",(0,n.jsx)(s.a,{href:"https://github.com/lerocha/chinook-database",children:"chinhook-database"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"To run this example locally,"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"mkdir example && cd example\nnix flake init -t github:Platonic-Systems/process-compose-flake\nnix run\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This should open ",(0,n.jsx)(s.a,{href:"http://127.0.0.1:8213/",children:"http://127.0.0.1:8213/"})," in your web browser. If not, navigate to the logs for the ",(0,n.jsx)(s.code,{children:"sqlite-web"})," process and access the URL. Use ",(0,n.jsx)(s.code,{children:"demo"})," as the password to access sqlite-web. The interface should look like this:"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://github.com/Platonic-Systems/process-compose-flake/assets/3998/254443fa-f3c2-4675-9ced-2a39ac23591d",alt:""})}),"\n",(0,n.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsxs)(s.p,{children:["Let's say you want to have a ",(0,n.jsx)(s.code,{children:"devShell"})," that makes a command ",(0,n.jsx)(s.code,{children:"watch-server"})," available, that you can use to spin up your projects ",(0,n.jsx)(s.code,{children:"backend-server"}),", ",(0,n.jsx)(s.code,{children:"frontend-server"}),", and ",(0,n.jsx)(s.code,{children:"proxy-server"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["To achieve this using ",(0,n.jsx)(s.code,{children:"process-compose-flake"})," you can simply add the following code to the ",(0,n.jsx)(s.code,{children:"perSystem"})," function in your ",(0,n.jsx)(s.code,{children:"flake-parts"})," flake."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-nix",children:'process-compose.watch-server = {\n  settings.processes = {\n    backend-server.command = "${self\'.apps.backend-server.program} --port 9000";\n    frontend-server.command = "${self\'.apps.frontend-server.program} --port 9001";\n    proxy-server.command =\n      let\n        proxyConfig = pkgs.writeTextFile {\n          name = "proxy.conf";\n          text = \'\'\n            ...\n          \'\';\n        };\n      in\n      "${self\'.apps.proxy-server.program} -c ${proxyConfig} -p 8000";\n  };\n};\n'})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"process-compose-flake"})," will generate the ",(0,n.jsx)(s.code,{children:"packages.${system}.watch-server"})," output for you."]}),"\n",(0,n.jsxs)(s.p,{children:["You can then spin up the processes by running ",(0,n.jsx)(s.code,{children:"nix run .#watch-server"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"package"})," output in turn can be used to make the ",(0,n.jsx)(s.code,{children:"watch-server"})," command available in your ",(0,n.jsx)(s.code,{children:"devShell"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-nix",children:'devShells = {\n  default = pkgs.mkShell {\n    name = "my-shell";\n    nativeBuildInputs = [\n      self\'.packages.watch-server\n    ];\n  };\n};\n'})}),"\n",(0,n.jsxs)(s.p,{children:["You can enter your devShell by running ",(0,n.jsx)(s.code,{children:"nix develop"})," and run ",(0,n.jsx)(s.code,{children:"watch-server"})," to run your processes."]}),"\n",(0,n.jsx)(s.h2,{id:"module-api",children:"Module API"}),"\n",(0,n.jsxs)(s.p,{children:["Our submodule mirrors the ",(0,n.jsx)(s.a,{href:"https://github.com/F1bonacc1/process-compose/blob/main/process-compose.yaml",children:"process-compose YAML schema"}),". A few things to remember:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"process-compose.<name>.environment"}),": In the YAML config, a list of environment strings are specified. While this is supported, you can also specify the env vars as a Nix attrset"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"process-compose.<name>.processes.<name>.command"}),": The command string does not have access to the process environment, so if your command becomes shellscript-like you probably want to wrap it in a ",(0,n.jsx)(s.code,{children:"pkgs.writeShellApplication"})," (see ",(0,n.jsx)(s.a,{href:"https://github.com/Platonic-Systems/process-compose-flake/issues/22",children:"#22"}),")."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"process-compose.<name>.shell"}),": This is set to ",(0,n.jsx)(s.code,{children:"pkgs.bash"})," by default, obviating reproducibility issues due to depending on globally available bash."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"related-projects",children:"Related projects"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.a,{href:"https://github.com/srid/proc-flake",children:(0,n.jsx)(s.code,{children:"proc-flake"})}),": A similar module that uses a ",(0,n.jsx)(s.code,{children:"Procfile"}),"-based runner. It is less feature-rich, but ",(0,n.jsx)(s.a,{href:"https://github.com/Platonic-Systems/process-compose-flake/issues/30",children:"at times more reliable"})," than process-compose."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.a,{href:"/services-flake",children:(0,n.jsx)(s.code,{children:"services-flake"})}),": NixOS-like services built on top of process-compose-flake."]}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,s,o)=>{o.d(s,{Z:()=>a,a:()=>i});var n=o(7294);const r={},c=n.createContext(r);function i(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);