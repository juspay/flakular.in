"use strict";(self.webpackChunkzero_to_flakes=self.webpackChunkzero_to_flakes||[]).push([[399],{3905:(e,t,l)=>{l.d(t,{Zo:()=>h,kt:()=>m});var n=l(7294);function r(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function o(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function a(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?o(Object(l),!0).forEach((function(t){r(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function s(e,t){if(null==e)return{};var l,n,r=function(e,t){if(null==e)return{};var l,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)l=o[n],t.indexOf(l)>=0||(r[l]=e[l]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)l=o[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(r[l]=e[l])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),l=t;return e&&(l="function"==typeof e?e(t):a(a({},t),e)),l},h=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var l=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),c=p(l),d=r,m=c["".concat(i,".").concat(d)]||c[d]||u[d]||o;return l?n.createElement(m,a(a({ref:t},h),{},{components:l})):n.createElement(m,a({ref:t},h))}));function m(e,t){var l=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=l.length,a=new Array(o);a[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:r,a[1]=s;for(var p=2;p<o;p++)a[p]=l[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,l)}d.displayName="MDXCreateElement"},2977:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=l(7462),r=(l(7294),l(3905));const o={slug:"/haskell-flake/devshell"},a="DevShell",s={unversionedId:"modules/haskell/guide/devshell",id:"modules/haskell/guide/devshell",title:"DevShell",description:"haskell-flake uses the shellFor function to provide a Haskell development shell. shellFor in turn uses the standard mkShell function to create a Nix shell environment. The mkShellArgs option can be used to pass custom arguments to mkShell.",source:"@site/docs/modules/haskell/guide/devshell.md",sourceDirName:"modules/haskell/guide",slug:"/haskell-flake/devshell",permalink:"/haskell-flake/devshell",draft:!1,editUrl:"https://github.com/juspay/zero-to-flakes/tree/main/docs/modules/haskell/guide/devshell.md",tags:[],version:"current",frontMatter:{slug:"/haskell-flake/devshell"},sidebar:"tutorialSidebar",previous:{title:"Overriding dependencies",permalink:"/haskell-flake/dependency"},next:{title:"Project modules",permalink:"/haskell-flake/modules"}},i={},p=[{value:"Composing devShells",id:"composing-devshells",level:2}],h={toc:p},c="wrapper";function u(e){let{components:t,...l}=e;return(0,r.kt)(c,(0,n.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"devshell"},"DevShell"),(0,r.kt)("p",null,"haskell-flake uses the ",(0,r.kt)("a",{parentName:"p",href:"https://nixos.org/manual/nixpkgs/unstable/#haskell-shellFor"},(0,r.kt)("inlineCode",{parentName:"a"},"shellFor"))," function to provide a Haskell development shell. ",(0,r.kt)("inlineCode",{parentName:"p"},"shellFor")," in turn uses the standard ",(0,r.kt)("a",{parentName:"p",href:"https://nixos.org/manual/nixpkgs/stable/#sec-pkgs-mkShell"},(0,r.kt)("inlineCode",{parentName:"a"},"mkShell"))," function to create a Nix shell environment. The ",(0,r.kt)("inlineCode",{parentName:"p"},"mkShellArgs")," option can be used to pass custom arguments to ",(0,r.kt)("inlineCode",{parentName:"p"},"mkShell"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nix"},"{\n  haskellProjects.default = {\n    devShell = {\n      mkShellArgs = {\n        shellHook = ''\n          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${pkgs.flint}/lib\n        ''\n      };\n    }\n  }\n}\n")),(0,r.kt)("h2",{id:"composing-devshells"},"Composing devShells"),(0,r.kt)("p",null,"While ",(0,r.kt)("inlineCode",{parentName:"p"},"mkShellArgs")," is a convenient way to extend the Haskell devShell, sometimes you want to compose multiple devShell environments in a way you want."),(0,r.kt)("p",null,"The devShell of a haskell-flake project is exposed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"config.haskellProjects.<name>.outputs.devShell")," attribute. You can pass this devShell to the ",(0,r.kt)("inlineCode",{parentName:"p"},"inputsFrom")," argument of a ",(0,r.kt)("a",{parentName:"p",href:"https://nixos.org/manual/nixpkgs/stable/#sec-pkgs-mkShell"},(0,r.kt)("inlineCode",{parentName:"a"},"mkShell"))," function in order to include the Haskell devShell in another devShell. The same technique can be used to compose devShells created by other flake-parts modules. "),(0,r.kt)("p",null,"For example, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/srid/haskell-template/blob/fc263b19e4ef02710ffc61fc656aec6c1a873974/flake.nix#L96-L102"},"in haskell-template"),", we create a top-level devShell that merges the devShell of the haskell-flake project, the devShell of ",(0,r.kt)("a",{parentName:"p",href:"/mission-control"},"mission-control")," and the devShell of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/srid/flake-root"},"flake-root")," as follows::"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-nix"},"{\n  devShell = pkgs.mkShell {\n    inputsFrom = [\n      config.haskellProjects.default.outputs.devShell\n      config.flake-root.devShell\n      config.mission-control.devShell\n    ];\n  };\n}\n")),(0,r.kt)("p",null,"This sort of composition is either impossible or very complex to do with the ",(0,r.kt)("inlineCode",{parentName:"p"},"mkShellArgs")," approach."))}u.isMDXComponent=!0}}]);